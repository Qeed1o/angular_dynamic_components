{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/button/button.component.ts","webpack:///src/app/components/button/button.component.html","webpack:///src/app/components/forminput/forminput.component.ts","webpack:///src/app/components/forminput/forminput.component.html","webpack:///src/app/components/formselect/formselect.component.ts","webpack:///src/app/components/formselect/formselect.component.html","webpack:///src/app/constants.ts","webpack:///src/app/models/index.ts","webpack:///src/app/services/DynamicFieldsService.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ComponentsDictionary","Select","Input","AppComponent","formBuilder","dynamicComponentsService","fields","setFields","group","filter","f","type","Button","reduce","acc","name","value","validatorOrOpts","asyncValidator","form","setViewRef","viewRef","addComponents","bindFormControls","controls","Object","entries","all","key","control","valid","errors","JSON","stringify","selector","templateUrl","styleUrls","read","map","AppModule","provide","useValue","declarations","imports","providers","bootstrap","ButtonComponent","onClick","ForminputComponent","onChange","_","_value","val","fn","useExisting","multi","FormselectComponent","data","options","FIELDS_INJECTION_TOKEN","COMPONENTS_MAP_INJECTION_TOKEN","InitialFields","required","minLength","label","console","log","FieldTypes","DynamicComponentsService","componentMap","componentFactoryResolver","clear","components","field","component","componentFactory","resolveComponentFactory","createdComponent","createComponent","instance","registerOnChange","setValue","registerOnTouched","markAsUntouched","restFieldProperties","providedIn","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, Component, ComponentFactoryResolver, ComponentRef, Inject, OnInit, Type, ViewChild, ViewContainerRef, ɵComponentType } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ForminputComponent } from './components/forminput/forminput.component';\nimport { FormselectComponent } from './components/formselect/formselect.component';\nimport { FIELDS_INJECTION_TOKEN } from './constants';\nimport { BasicField, FieldTypes } from './models';\nimport { DynamicComponentsService } from './services/DynamicFieldsService';\n\n\nconst ComponentsDictionary = {\n  [FieldTypes.Select]: FormselectComponent,\n  [FieldTypes.Input]: ForminputComponent\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements AfterViewInit {\n\n  @ViewChild('dyn', { read: ViewContainerRef })\n  private viewRef: ViewContainerRef;\n\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private dynamicComponentsService: DynamicComponentsService,\n    @Inject(FIELDS_INJECTION_TOKEN) private fields: BasicField[]\n  ) {\n    this.dynamicComponentsService.setFields(this.fields);\n\n    const group = this.fields\n      .filter(f => f.type !== FieldTypes.Button)\n      .reduce( (acc, f) => ({\n        ...acc,\n        [f.name]: new FormControl(\n          f.value,\n          f.validatorOrOpts,\n          f.asyncValidator\n        )\n      }), {} )\n    this.form = this.formBuilder.group(group)\n  }\n\n  ngAfterViewInit(): void {\n    this.dynamicComponentsService\n      .setViewRef(this.viewRef)\n      .addComponents();\n    this.dynamicComponentsService.bindFormControls(this.form.controls);\n  }\n\n  get jsonForm() {\n    const controls = Object.entries(this.form.controls)\n      .reduce( (all, [key, control]) => ({\n        ...all,\n        [key]: {\n          value: control.value,\n          valid: control.valid,\n          errors: control.errors\n        }\n      }), {} )\n    return JSON.stringify(controls, null, 2)\n  }\n}\n","<div class=\"main\">\n    <h1 class='title'>test</h1>\n    <form [formGroup]=\"form\">\n        <div #dyn></div>\n    </form>\n    <div class=\"variables\">\n      <pre>{{ jsonForm }}</pre>\n    </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ForminputComponent } from './components/forminput/forminput.component';\nimport { FormselectComponent } from './components/formselect/formselect.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ComponentMap, FieldTypes } from './models';\nimport { COMPONENTS_MAP_INJECTION_TOKEN, FIELDS_INJECTION_TOKEN, InitialFields } from './constants';\nimport { ButtonComponent } from './components/button/button.component';\n\nconst map: ComponentMap = {\n  [FieldTypes.Select]: FormselectComponent,\n  [FieldTypes.Input]: ForminputComponent,\n  [FieldTypes.Button]: ButtonComponent\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ForminputComponent,\n    FormselectComponent,\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    FormsModule,\n    BrowserAnimationsModule,\n  ],\n  providers: [\n    {\n      provide: COMPONENTS_MAP_INJECTION_TOKEN,\n      useValue: map\n    },\n    {\n      provide: FIELDS_INJECTION_TOKEN,\n      useValue: InitialFields\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, Input } from '@angular/core';\nimport { ButtonField } from 'src/app/models';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n  @Input() data: ButtonField;\n  @Input() onClick = () => {};\n}\n","<button (click)='onClick()'>\n    {{ data.label }}\n</button>\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BasicField } from 'src/app/models';\n\n@Component({\n  selector: 'app-forminput',\n  templateUrl: './forminput.component.html',\n  styleUrls: ['./forminput.component.scss'],\n  providers: [{ \n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ForminputComponent),\n    multi: true\n  }]\n})\nexport class ForminputComponent implements ControlValueAccessor {\n  @Input() data: BasicField;\n\n  private _value;\n  private onChange = (_: any) => { };\n\n  @Input()\n  set value(val: any) {\n    this._value = val;\n    this.onChange(this._value);\n  }\n  get value() {\n    return this._value;\n  }\n\n  writeValue(val: any): void {\n    this.value = val;\n  }\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any): void { }\n}\n","<div class=\"input\" *ngIf='!!data'>\n    <!-- <label [for]=\"data.name\">{{ data.name }}</label> -->\n    <input [(ngModel)]='value' />\n</div>\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { SelectField } from 'src/app/models';\n\n@Component({\n  selector: 'app-formselect',\n  templateUrl: './formselect.component.html',\n  styleUrls: ['./formselect.component.scss'],\n  providers: [{ \n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => FormselectComponent),\n    multi: true\n  }]\n})\nexport class FormselectComponent implements ControlValueAccessor {\n\n  @Input() data: SelectField;\n\n  private _value;\n  private onChange = (_: any) => { };\n\n  @Input()\n  set value(val: any) {\n    this._value = val;\n    this.onChange(this._value);\n  }\n  get value() {\n    return this._value;\n  }\n\n  writeValue(val: any): void {\n    this.value = val;\n  }\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any): void { }\n\n  get options() {\n    if (!this.data) return [];\n    return this.data.options;\n  }\n\n}\n","<div class=\"select\">\n    <label [for]=\"data.name\">{{ data.name }}</label>\n    <select [(ngModel)]='value'>\n        <option \n            *ngFor='let opt of options'\n            [value]='opt'\n            [label]='opt'\n        ></option>\n    </select>\n</div>\n","import { Validators } from \"@angular/forms\";\nimport { BasicField, ButtonField, FieldTypes, SelectField } from \"./models\";\n\nexport const FIELDS_INJECTION_TOKEN = 'Fields';\nexport const COMPONENTS_MAP_INJECTION_TOKEN = 'ComponentMap';\n\nexport const InitialFields: BasicField[] = [\n    {\n      name: 'age-input',\n      type: FieldTypes.Input,\n      value: 'test',\n      validatorOrOpts: [Validators.required, Validators.minLength(5)]\n    },\n    {\n      name: 'day-select',\n      type: FieldTypes.Select,\n      options: [\n        'Понедельник',\n        'Вторник',\n        'Среда',\n        'Четверг',\n        'Пятница',\n        'Суббота',\n        'Воскресенье',\n      ],\n      value: 'Понедельник',\n    } as SelectField<string>,\n    {\n      name: 'number-select',\n      type: FieldTypes.Select,\n      options: [\n        1,\n        2,\n        3,\n        4,\n        5\n      ]\n    } as SelectField<number>,\n    {\n        label: 'Submit',\n        name: 'submit-button',\n        onClick: () => console.log('submit'),\n        type: FieldTypes.Button,\n    } as ButtonField\n  ]","import { Type } from \"@angular/core\";\nimport { AbstractControlOptions, AsyncValidatorFn, ValidatorFn } from \"@angular/forms\";\n\nexport enum FieldTypes {\n    Input = 'input',\n    Select = 'select',\n    Button = 'button'\n}\n\nexport interface BasicField {\n    type: FieldTypes;\n    name: string;\n    id?: string;\n    value?: unknown;\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null;\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null;\n}\n\nexport interface ButtonField extends BasicField {\n    label: string;\n    onClick: () => void;\n}\n\nexport interface SelectField<T = unknown> extends BasicField {\n    options: T[];\n}\n\nexport type ComponentMap = Record<FieldTypes, Type<unknown>>\n","import { ComponentFactoryResolver, ComponentRef, Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { COMPONENTS_MAP_INJECTION_TOKEN } from '../constants';\nimport { BasicField, ButtonField, ComponentMap, FieldTypes } from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamicComponentsService {\n    private viewRef: ViewContainerRef;\n    fields: BasicField[];\n    components: { [key: string]: ComponentRef<unknown> };\n\n    constructor(\n        @Inject(COMPONENTS_MAP_INJECTION_TOKEN) private componentMap: ComponentMap,\n        private readonly componentFactoryResolver: ComponentFactoryResolver\n    ) { }\n\n    setFields(fields: BasicField[]): this { \n        this.fields = fields;\n        return this;\n    }\n    setViewRef(viewRef: ViewContainerRef): this { \n        this.viewRef = viewRef;\n        return this;\n    }\n    addComponents() {\n        this.viewRef.clear();\n        this.components = this.fields.reduce( (all, field) => {\n            const component = this.componentMap[field.type]\n            const componentFactory =\n                this.componentFactoryResolver.resolveComponentFactory(component);\n            const createdComponent = this.viewRef.createComponent(componentFactory);\n            return {\n                ...all,\n                [field.name]: createdComponent\n            }\n        }, {});\n    }\n    bindFormControls(controls: { [key: string]: AbstractControl }) {\n        for (const field of this.fields) {\n            const { name, ...restFieldProperties } = field;\n            const component = this.components[name];\n\n            const instance = component.instance as { [key: string]: any }\n            if (field.type !== FieldTypes.Button) {\n                instance.registerOnChange(val => controls[name].setValue(val));\n                instance.registerOnTouched(controls[name].markAsUntouched)\n                instance.value = controls[name].value;\n            } else {\n                instance.onClick = (field as ButtonField).onClick;\n            }\n            instance.data = restFieldProperties;\n        }\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}